import { create } from 'zustand';
import { 
  行情数据,
  加权合约数据,
  席位分析数据,
  持仓数据表项,
  席位数据表项,
  实多空指标数据,
  净多空指标数据,
  流多空指标数据,
  席位曲线数据,
  饼图数据,
  品种代码,
  交易日期,
  席位名称,
  API响应
} from '../types';

/** 数据存储状态接口 */
interface 数据存储状态 {
  // ==================== 基础数据缓存 ====================
  /** 行情数据缓存 */
  行情数据缓存: Map<string, 行情数据[]>;
  设置行情数据: (品种: 品种代码, 数据: 行情数据[]) => void;
  获取行情数据: (品种: 品种代码) => 行情数据[];
  
  /** 加权合约数据缓存 */
  加权合约缓存: Map<string, 加权合约数据[]>;
  设置加权合约数据: (品种: 品种代码, 数据: 加权合约数据[]) => void;
  获取加权合约数据: (品种: 品种代码) => 加权合约数据[];
  
  /** 席位分析数据缓存 */
  席位分析缓存: Map<string, 席位分析数据[]>;
  设置席位分析数据: (品种: 品种代码, 数据: 席位分析数据[]) => void;
  获取席位分析数据: (品种: 品种代码) => 席位分析数据[];
  
  // ==================== 计算指标缓存 ====================
  /** 实多空指标缓存 */
  实多空指标缓存: Map<string, 实多空指标数据[]>;
  设置实多空指标: (品种: 品种代码, 数据: 实多空指标数据[]) => void;
  获取实多空指标: (品种: 品种代码) => 实多空指标数据[];
  
  /** 净多空指标缓存 */
  净多空指标缓存: Map<string, 净多空指标数据[]>;
  设置净多空指标: (品种: 品种代码, 数据: 净多空指标数据[]) => void;
  获取净多空指标: (品种: 品种代码) => 净多空指标数据[];
  
  /** 流多空指标缓存 */
  流多空指标缓存: Map<string, 流多空指标数据[]>;
  设置流多空指标: (品种: 品种代码, 数据: 流多空指标数据[]) => void;
  获取流多空指标: (品种: 品种代码) => 流多空指标数据[];
  
  /** 席位曲线数据缓存 */
  席位曲线缓存: Map<string, Map<席位名称, 席位曲线数据>>;
  设置席位曲线: (品种: 品种代码, 席位: 席位名称, 数据: 席位曲线数据) => void;
  获取席位曲线: (品种: 品种代码, 席位: 席位名称) => 席位曲线数据 | null;
  获取品种所有席位曲线: (品种: 品种代码) => 席位曲线数据[];
  
  /** 饼图数据缓存 */
  饼图数据缓存: Map<string, 饼图数据>;
  设置饼图数据: (品种: 品种代码, 数据: 饼图数据) => void;
  获取饼图数据: (品种: 品种代码) => 饼图数据 | null;
  
  // ==================== 表格数据缓存 ====================
  /** 持仓数据表缓存 */
  持仓表缓存: Map<string, 持仓数据表项[]>;
  设置持仓表数据: (品种: 品种代码, 数据: 持仓数据表项[]) => void;
  获取持仓表数据: (品种: 品种代码) => 持仓数据表项[];
  
  /** 席位数据表缓存 */
  席位表缓存: Map<string, 席位数据表项[]>;
  设置席位表数据: (品种: 品种代码, 数据: 席位数据表项[]) => void;
  获取席位表数据: (品种: 品种代码) => 席位数据表项[];
  
  // ==================== 品种列表管理 ====================
  /** 所有品种列表 */
  品种列表: 品种代码[];
  设置品种列表: (列表: 品种代码[]) => void;
  添加品种: (品种: 品种代码) => void;
  
  /** 品种名称映射 */
  品种名称映射: Map<品种代码, string>;
  设置品种名称: (品种: 品种代码, 名称: string) => void;
  获取品种名称: (品种: 品种代码) => string;
  
  // ==================== 缓存管理 ====================
  /** 清空指定品种的所有缓存 */
  清空品种缓存: (品种: 品种代码) => void;
  
  /** 清空所有缓存 */
  清空所有缓存: () => void;
  
  /** 获取缓存统计信息 */
  获取缓存统计: () => {
    行情数据条数: number;
    加权合约条数: number;
    席位分析条数: number;
    指标缓存条数: number;
    品种总数: number;
  };
}

export const useDataStore = create<数据存储状态>((set, get) => ({
  // ==================== 基础数据缓存 ====================
  行情数据缓存: new Map(),
  设置行情数据: (品种, 数据) => {
    const { 行情数据缓存 } = get();
    const newCache = new Map(行情数据缓存);
    newCache.set(品种, 数据);
    set({ 行情数据缓存: newCache });
  },
  获取行情数据: (品种) => {
    const { 行情数据缓存 } = get();
    return 行情数据缓存.get(品种) || [];
  },
  
  加权合约缓存: new Map(),
  设置加权合约数据: (品种, 数据) => {
    const { 加权合约缓存 } = get();
    const newCache = new Map(加权合约缓存);
    newCache.set(品种, 数据);
    set({ 加权合约缓存: newCache });
  },
  获取加权合约数据: (品种) => {
    const { 加权合约缓存 } = get();
    return 加权合约缓存.get(品种) || [];
  },
  
  席位分析缓存: new Map(),
  设置席位分析数据: (品种, 数据) => {
    const { 席位分析缓存 } = get();
    const newCache = new Map(席位分析缓存);
    newCache.set(品种, 数据);
    set({ 席位分析缓存: newCache });
  },
  获取席位分析数据: (品种) => {
    const { 席位分析缓存 } = get();
    return 席位分析缓存.get(品种) || [];
  },
  
  // ==================== 计算指标缓存 ====================
  实多空指标缓存: new Map(),
  设置实多空指标: (品种, 数据) => {
    const { 实多空指标缓存 } = get();
    const newCache = new Map(实多空指标缓存);
    newCache.set(品种, 数据);
    set({ 实多空指标缓存: newCache });
  },
  获取实多空指标: (品种) => {
    const { 实多空指标缓存 } = get();
    return 实多空指标缓存.get(品种) || [];
  },
  
  净多空指标缓存: new Map(),
  设置净多空指标: (品种, 数据) => {
    const { 净多空指标缓存 } = get();
    const newCache = new Map(净多空指标缓存);
    newCache.set(品种, 数据);
    set({ 净多空指标缓存: newCache });
  },
  获取净多空指标: (品种) => {
    const { 净多空指标缓存 } = get();
    return 净多空指标缓存.get(品种) || [];
  },
  
  流多空指标缓存: new Map(),
  设置流多空指标: (品种, 数据) => {
    const { 流多空指标缓存 } = get();
    const newCache = new Map(流多空指标缓存);
    newCache.set(品种, 数据);
    set({ 流多空指标缓存: newCache });
  },
  获取流多空指标: (品种) => {
    const { 流多空指标缓存 } = get();
    return 流多空指标缓存.get(品种) || [];
  },
  
  席位曲线缓存: new Map(),
  设置席位曲线: (品种, 席位, 数据) => {
    const { 席位曲线缓存 } = get();
    const newCache = new Map(席位曲线缓存);
    
    if (!newCache.has(品种)) {
      newCache.set(品种, new Map());
    }
    
    const 品种缓存 = newCache.get(品种)!;
    品种缓存.set(席位, 数据);
    
    set({ 席位曲线缓存: newCache });
  },
  获取席位曲线: (品种, 席位) => {
    const { 席位曲线缓存 } = get();
    const 品种缓存 = 席位曲线缓存.get(品种);
    return 品种缓存?.get(席位) || null;
  },
  获取品种所有席位曲线: (品种) => {
    const { 席位曲线缓存 } = get();
    const 品种缓存 = 席位曲线缓存.get(品种);
    return 品种缓存 ? Array.from(品种缓存.values()) : [];
  },
  
  饼图数据缓存: new Map(),
  设置饼图数据: (品种, 数据) => {
    const { 饼图数据缓存 } = get();
    const newCache = new Map(饼图数据缓存);
    newCache.set(品种, 数据);
    set({ 饼图数据缓存: newCache });
  },
  获取饼图数据: (品种) => {
    const { 饼图数据缓存 } = get();
    return 饼图数据缓存.get(品种) || null;
  },
  
  // ==================== 表格数据缓存 ====================
  持仓表缓存: new Map(),
  设置持仓表数据: (品种, 数据) => {
    const { 持仓表缓存 } = get();
    const newCache = new Map(持仓表缓存);
    newCache.set(品种, 数据);
    set({ 持仓表缓存: newCache });
  },
  获取持仓表数据: (品种) => {
    const { 持仓表缓存 } = get();
    return 持仓表缓存.get(品种) || [];
  },
  
  席位表缓存: new Map(),
  设置席位表数据: (品种, 数据) => {
    const { 席位表缓存 } = get();
    const newCache = new Map(席位表缓存);
    newCache.set(品种, 数据);
    set({ 席位表缓存: newCache });
  },
  获取席位表数据: (品种) => {
    const { 席位表缓存 } = get();
    return 席位表缓存.get(品种) || [];
  },
  
  // ==================== 品种列表管理 ====================
  品种列表: [],
  设置品种列表: (列表) => set({ 品种列表: 列表 }),
  添加品种: (品种) => {
    const { 品种列表 } = get();
    if (!品种列表.includes(品种)) {
      set({ 品种列表: [...品种列表, 品种] });
    }
  },
  
  品种名称映射: new Map(),
  设置品种名称: (品种, 名称) => {
    const { 品种名称映射 } = get();
    const newMapping = new Map(品种名称映射);
    newMapping.set(品种, 名称);
    set({ 品种名称映射: newMapping });
  },
  获取品种名称: (品种) => {
    const { 品种名称映射 } = get();
    return 品种名称映射.get(品种) || 品种;
  },
  
  // ==================== 缓存管理 ====================
  清空品种缓存: (品种) => {
    const state = get();
    
    // 创建新的缓存映射，移除指定品种的数据
    const 新行情缓存 = new Map(state.行情数据缓存);
    新行情缓存.delete(品种);
    
    const 新加权缓存 = new Map(state.加权合约缓存);
    新加权缓存.delete(品种);
    
    const 新席位缓存 = new Map(state.席位分析缓存);
    新席位缓存.delete(品种);
    
    const 新实多空缓存 = new Map(state.实多空指标缓存);
    新实多空缓存.delete(品种);
    
    const 新净多空缓存 = new Map(state.净多空指标缓存);
    新净多空缓存.delete(品种);
    
    const 新流多空缓存 = new Map(state.流多空指标缓存);
    新流多空缓存.delete(品种);
    
    const 新席位曲线缓存 = new Map(state.席位曲线缓存);
    新席位曲线缓存.delete(品种);
    
    const 新饼图缓存 = new Map(state.饼图数据缓存);
    新饼图缓存.delete(品种);
    
    const 新持仓表缓存 = new Map(state.持仓表缓存);
    新持仓表缓存.delete(品种);
    
    const 新席位表缓存 = new Map(state.席位表缓存);
    新席位表缓存.delete(品种);
    
    set({
      行情数据缓存: 新行情缓存,
      加权合约缓存: 新加权缓存,
      席位分析缓存: 新席位缓存,
      实多空指标缓存: 新实多空缓存,
      净多空指标缓存: 新净多空缓存,
      流多空指标缓存: 新流多空缓存,
      席位曲线缓存: 新席位曲线缓存,
      饼图数据缓存: 新饼图缓存,
      持仓表缓存: 新持仓表缓存,
      席位表缓存: 新席位表缓存
    });
  },
  
  清空所有缓存: () => {
    set({
      行情数据缓存: new Map(),
      加权合约缓存: new Map(),
      席位分析缓存: new Map(),
      实多空指标缓存: new Map(),
      净多空指标缓存: new Map(),
      流多空指标缓存: new Map(),
      席位曲线缓存: new Map(),
      饼图数据缓存: new Map(),
      持仓表缓存: new Map(),
      席位表缓存: new Map()
    });
  },
  
  获取缓存统计: () => {
    const state = get();
    
    let 行情数据条数 = 0;
    state.行情数据缓存.forEach(data => 行情数据条数 += data.length);
    
    let 加权合约条数 = 0;
    state.加权合约缓存.forEach(data => 加权合约条数 += data.length);
    
    let 席位分析条数 = 0;
    state.席位分析缓存.forEach(data => 席位分析条数 += data.length);
    
    const 指标缓存条数 = 
      state.实多空指标缓存.size + 
      state.净多空指标缓存.size + 
      state.流多空指标缓存.size + 
      state.席位曲线缓存.size + 
      state.饼图数据缓存.size;
    
    return {
      行情数据条数,
      加权合约条数,
      席位分析条数,
      指标缓存条数,
      品种总数: state.品种列表.length
    };
  }
}));